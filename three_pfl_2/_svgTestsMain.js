// RIGHT /UP /TOWARDS ME ;)
// starMaterial = whiteMaterial for now

import '/style.css'
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import Stats from 'three/examples/jsm/libs/stats.module.js';
import { Group } from 'three';

const svg = `<svg width="100%" height="100%" viewBox="0 0 1440 225" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
<g transform="matrix(1.54726,0,0,1.54726,-373.378,-316.023)">
    <path d="M383.831,244.383C421.528,244.383 452.3,256.5 476.149,280.734L476.149,272.656C476.149,257.654 482.111,250.153 494.036,250.153C507.114,250.153 513.653,258.423 513.653,274.964L513.653,278.426C513.653,279.195 513.076,284.965 511.922,295.735C510.768,306.506 510.191,319.392 510.191,334.393C510.191,336.317 510.576,342.471 511.345,352.857L513.076,375.936C513.461,377.859 513.653,380.552 513.653,384.014C513.653,402.478 506.537,411.709 492.305,411.709C477.303,411.709 469.802,404.016 469.802,388.63L469.802,385.745L470.956,370.166C471.341,364.781 471.533,360.55 471.533,357.473C471.533,334.393 463.744,316.314 448.165,303.236C432.587,290.158 411.142,283.618 383.831,283.618C358.829,283.618 338.923,289.773 324.113,302.082C309.304,314.391 301.899,330.931 301.899,351.703C301.899,375.936 312.862,393.823 334.788,405.362C347.097,411.517 368.637,417.095 399.41,422.095C445.184,429.404 476.534,439.405 493.459,452.098C518.846,470.947 531.54,497.68 531.54,532.299C531.54,568.457 518.558,597.883 492.593,620.578C466.629,643.273 433.067,654.62 391.909,654.62C348.058,654.62 311.708,640.773 282.859,613.077C282.859,614.616 283.051,616.347 283.436,618.27L283.436,621.732C284.205,627.887 284.59,631.926 284.59,633.849C284.59,648.081 277.858,655.197 264.395,655.197C249.778,655.197 242.47,647.12 242.47,630.964C242.47,629.041 242.662,627.502 243.047,626.348L245.355,596.345C246.509,581.343 247.086,571.727 247.086,567.496C247.086,559.802 246.124,548.263 244.201,532.876C242.277,517.49 241.316,505.95 241.316,498.257C241.316,480.948 248.624,472.293 263.241,472.293C278.243,472.293 285.744,480.948 285.744,498.257L285.744,508.643C285.359,511.72 285.167,516.144 285.167,521.914C285.167,550.763 294.399,573.65 312.862,590.575C331.326,607.5 356.328,615.962 387.87,615.962C417.104,615.962 440.376,609.039 457.686,595.191C474.995,581.343 483.65,562.495 483.65,538.646C483.65,502.104 460.57,479.794 414.412,471.716L381.523,465.946C348.828,460.176 323.44,453.445 305.361,445.752C288.821,438.443 275.646,426.999 265.838,411.421C256.029,395.842 251.125,378.244 251.125,358.627C251.125,324.777 263.434,297.274 288.052,276.118C312.67,254.962 344.596,244.383 383.831,244.383Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M719.06,651.735C678.671,651.735 646.36,637.792 622.126,609.904C597.893,582.016 585.776,544.608 585.776,497.68C585.776,450.752 597.989,413.344 622.415,385.456C646.841,357.569 679.633,343.625 720.791,343.625C762.719,343.625 795.799,357.28 820.033,384.591C844.266,411.902 856.383,449.021 856.383,495.949C856.383,542.877 843.881,580.574 818.879,609.039C793.876,637.503 760.603,651.735 719.06,651.735ZM721.945,381.706C695.019,381.706 673.863,391.13 658.477,409.978C643.09,428.827 634.628,455.56 633.089,490.179L633.089,497.68C633.089,533.838 640.686,562.206 655.88,582.786C671.074,603.365 692.326,613.654 719.637,613.654C747.717,613.654 769.739,603.365 785.702,582.786C801.665,562.206 809.647,533.646 809.647,497.103C809.647,420.172 780.413,381.706 721.945,381.706Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M1136.8,627.502L1136.8,609.615C1116.41,637.695 1086.21,651.735 1046.21,651.735C1000.82,651.735 969.28,637.695 951.585,609.615C943.892,597.306 939.661,582.882 938.892,566.342C938.507,558.264 938.315,541.339 938.315,515.567L938.315,467.677C938.315,414.979 932.737,388.63 921.582,388.63C919.274,388.63 915.62,389.111 910.619,390.072C905.619,391.034 901.772,391.515 899.08,391.515C885.617,391.515 878.885,385.168 878.885,372.474C878.885,360.165 887.155,354.011 903.696,354.011C907.542,354.011 913.216,354.395 920.717,355.165C928.217,355.934 933.891,356.319 937.738,356.319C941.2,356.319 947.162,355.742 955.624,354.588C961.394,353.818 964.664,353.434 965.433,353.434C977.357,353.434 983.32,360.742 983.32,375.359L983.32,387.476L982.743,424.98L981.012,467.677L981.012,505.181C981.012,538.646 983.704,562.687 989.09,577.304C997.937,601.538 1019.09,613.654 1052.56,613.654C1069.1,613.654 1083.71,609.904 1096.41,602.403C1109.1,594.902 1117.95,584.997 1122.95,572.688C1129.11,557.687 1132.18,529.222 1132.18,487.294L1132.18,418.056C1130.26,399.593 1125.26,390.361 1117.18,390.361C1112.95,390.361 1109.49,390.746 1106.8,391.515L1099.87,391.515C1086.41,391.515 1079.68,385.553 1079.68,373.628C1079.68,360.165 1087.18,353.434 1102.18,353.434C1105.64,353.434 1110.93,353.818 1118.05,354.588C1125.16,355.357 1130.45,355.742 1133.91,355.742C1136.99,355.742 1141.61,355.453 1147.76,354.876C1153.91,354.299 1158.53,354.011 1161.61,354.011C1173.15,354.011 1178.92,360.165 1178.92,372.474C1178.92,377.859 1178.53,382.091 1177.76,385.168C1175.84,399.785 1174.88,421.326 1174.88,449.79L1174.88,538.646C1174.88,562.11 1175.07,575.189 1175.46,577.881C1177.38,598.268 1182.76,608.462 1191.61,608.462C1194.3,608.462 1198.15,607.981 1203.15,607.019C1208.15,606.057 1212,605.577 1214.69,605.577C1227.77,605.577 1234.31,611.923 1234.31,624.617C1234.31,637.695 1226.23,644.235 1210.08,644.235C1206.61,644.235 1201.61,643.85 1195.07,643.081C1185.46,641.927 1179.5,641.35 1177.19,641.35C1176.03,641.35 1171.99,641.734 1165.07,642.504C1160.45,643.658 1156.41,644.235 1152.95,644.235C1142.18,644.235 1136.8,638.657 1136.8,627.502Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M1346.82,371.32L1346.82,387.476C1369.9,358.242 1400.67,343.625 1439.14,343.625C1459.91,343.625 1479.53,348.914 1497.99,359.492C1516.45,370.07 1528.96,383.245 1535.5,399.016C1540.88,412.094 1543.57,429.211 1543.57,450.367L1543.57,559.995C1543.57,576.535 1543.77,586.344 1544.15,589.421C1546.07,602.499 1551.27,609.039 1559.73,609.039C1563.19,609.039 1567.71,608.558 1573.29,607.596C1578.87,606.634 1582.81,606.154 1585.12,606.154C1590.12,606.154 1594.44,607.885 1598.1,611.346C1601.75,614.808 1603.58,619.04 1603.58,624.04C1603.58,629.81 1601.27,634.618 1596.66,638.465C1592.04,642.311 1586.46,644.235 1579.92,644.235C1574.54,644.235 1565.69,643.465 1553.38,641.927C1541.07,640.388 1529.53,639.619 1518.76,639.619C1508.76,639.619 1500.49,640.003 1493.95,640.773C1474.72,643.081 1464.53,644.235 1463.37,644.235C1447.99,644.235 1440.29,637.503 1440.29,624.04C1440.29,612.116 1446.83,606.154 1459.91,606.154C1462.99,606.154 1466.45,606.538 1470.3,607.308C1477.6,608.846 1482.22,609.615 1484.14,609.615C1493.38,609.615 1498.38,599.037 1499.14,577.881L1500.3,548.455L1500.88,513.259L1500.88,469.408C1500.88,449.021 1499.91,434.981 1497.99,427.288C1494.53,412.671 1487.03,401.324 1475.49,393.246C1462.8,384.399 1448.37,379.975 1432.21,379.975C1401.44,379.975 1379.32,390.938 1365.86,412.863C1356.63,427.865 1352.01,453.445 1352.01,489.602L1352.01,566.342C1352.01,583.266 1353.17,594.806 1355.48,600.961C1357.78,607.115 1362.02,610.192 1368.17,610.192C1371.25,610.192 1375.48,609.423 1380.86,607.885C1386.25,606.346 1390.67,605.577 1394.13,605.577C1406.06,605.577 1412.02,612.116 1412.02,625.194C1412.02,637.888 1404.33,644.235 1388.94,644.235C1385.86,644.235 1375.86,643.081 1358.94,640.773C1350.48,639.619 1341.05,639.042 1330.66,639.042C1322.59,639.042 1311.82,639.811 1298.35,641.35C1281.43,643.273 1271.81,644.235 1269.51,644.235C1253.35,644.235 1245.27,637.695 1245.27,624.617C1245.27,612.308 1251.43,606.154 1263.74,606.154C1265.66,606.154 1269.22,606.731 1274.41,607.885C1279.6,609.039 1284.7,609.615 1289.7,609.615C1301.24,609.615 1307.2,598.46 1307.59,576.15L1308.74,512.105L1308.74,442.29L1307.59,422.095C1306.82,409.017 1305.18,400.073 1302.68,395.265C1300.18,390.457 1295.85,388.053 1289.7,388.053C1287.01,388.053 1283.06,388.534 1277.87,389.495C1272.68,390.457 1268.74,390.938 1266.04,390.938C1252.19,390.938 1245.27,384.783 1245.27,372.474C1245.27,359.781 1253.93,353.434 1271.24,353.434C1273.54,353.434 1275.47,353.626 1277.01,354.011L1298.35,356.319C1304.51,356.319 1309.89,355.934 1314.51,355.165C1324.51,354.395 1329.7,354.011 1330.09,354.011C1341.24,354.011 1346.82,359.781 1346.82,371.32Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M1755.33,343.625C1793.41,343.625 1821.87,358.434 1840.72,388.053L1840.72,329.777C1840.72,314.391 1840.34,304.967 1839.57,301.505C1837.64,289.581 1832.26,283.618 1823.41,283.618C1820.33,283.618 1816.01,284.195 1810.43,285.349C1804.85,286.503 1800.52,287.08 1797.45,287.08C1783.21,287.08 1776.1,280.926 1776.1,268.617C1776.1,255.923 1785.72,249.576 1804.95,249.576C1808.03,249.576 1813.6,249.961 1821.68,250.73C1833.99,251.884 1840.34,252.461 1840.72,252.461C1844.18,252.461 1849.18,252.077 1855.72,251.307C1862.26,250.538 1867.26,250.153 1870.72,250.153C1881.49,250.153 1886.88,257.846 1886.88,273.233L1886.88,279.58C1886.5,280.734 1886.11,290.927 1885.73,310.16C1885.73,312.468 1885.15,327.277 1884,354.588C1883.23,373.821 1882.84,388.438 1882.84,398.439L1882.84,454.983L1884,551.34C1884.38,576.727 1885.53,592.498 1887.46,598.653C1889.38,604.807 1894,607.885 1901.3,607.885C1906.31,607.885 1910.15,607.5 1912.84,606.731C1919,605.961 1923.23,605.577 1925.54,605.577C1939.77,605.577 1946.89,611.923 1946.89,624.617C1946.89,637.695 1938.23,644.235 1920.92,644.235C1917.08,644.235 1911.21,643.754 1903.32,642.792C1895.44,641.831 1889.57,641.35 1885.73,641.35C1884.57,641.35 1880.15,641.734 1872.45,642.504C1867.84,643.658 1863.8,644.235 1860.34,644.235C1849.95,644.235 1844.76,637.311 1844.76,623.463L1844.76,620.578L1845.34,610.769C1824.95,638.08 1795.33,651.735 1756.48,651.735C1717.25,651.735 1685.7,637.503 1661.86,609.039C1638.01,580.574 1626.08,543.262 1626.08,497.103C1626.08,450.56 1637.81,413.344 1661.28,385.456C1684.74,357.569 1716.09,343.625 1755.33,343.625ZM1837.26,547.301C1838.8,534.607 1839.57,518.259 1839.57,498.257C1839.57,472.485 1838.61,454.983 1836.68,445.752C1833.22,426.519 1824.95,411.517 1811.87,400.747C1796.49,388.053 1778.79,381.706 1758.79,381.706C1731.86,381.706 1710.8,391.899 1695.61,412.286C1680.41,432.673 1672.82,460.561 1672.82,495.949C1672.82,532.492 1680.7,561.245 1696.47,582.209C1712.25,603.172 1733.79,613.654 1761.1,613.654C1781.87,613.654 1799.18,607.596 1813.03,595.479C1826.87,583.363 1834.95,567.303 1837.26,547.301Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M2179.99,333.816C2179.99,304.967 2170.18,290.542 2150.56,290.542C2147.1,290.542 2143.06,290.927 2138.45,291.696C2131.52,292.85 2126.33,293.427 2122.87,293.427C2110.94,293.427 2104.98,287.273 2104.98,274.964C2104.98,261.501 2113.64,254.769 2130.95,254.769C2132.87,254.769 2135.37,254.962 2138.45,255.346L2169.03,259.385C2180.57,260.924 2192.87,261.693 2205.95,261.693C2216.72,261.693 2227.49,261.116 2238.26,259.962L2275.77,255.923C2283.08,255.154 2292.69,254.769 2304.62,254.769C2339.62,254.769 2368.86,259.77 2392.32,269.771C2423.09,282.849 2447.42,305.544 2465.31,337.855C2483.19,370.166 2492.14,407.67 2492.14,450.367C2492.14,488.064 2485.02,522.01 2470.79,552.205C2456.56,582.401 2437.13,604.615 2412.51,618.847C2382.89,636.157 2347.12,644.812 2305.19,644.812C2296.73,644.812 2288.08,644.427 2279.23,643.658L2239.42,640.196C2225.95,639.042 2211.91,638.465 2197.3,638.465C2184.6,638.465 2174.22,639.042 2166.14,640.196L2138.45,644.235C2137.68,644.235 2136.33,644.427 2134.41,644.812L2129.79,644.812C2113.25,644.812 2104.98,638.08 2104.98,624.617C2104.98,619.232 2106.71,614.712 2110.17,611.058C2113.64,607.404 2117.87,605.577 2122.87,605.577C2127.1,605.577 2132.29,606.154 2138.45,607.308C2141.14,608.077 2145.18,608.462 2150.56,608.462C2170.18,608.462 2179.99,594.037 2179.99,565.188L2179.99,333.816ZM2228.45,328.046L2228.45,572.111C2228.45,589.806 2237.11,600.576 2254.42,604.423C2260.19,605.961 2276.35,606.731 2302.89,606.731C2349.05,606.731 2382.51,594.229 2403.28,569.226C2428.28,539.223 2440.79,499.604 2440.79,450.367C2440.79,411.902 2433.19,379.302 2417.99,352.568C2402.8,325.835 2381.93,308.621 2355.39,300.928C2338.47,295.928 2318.08,293.427 2294.23,293.427C2263.84,293.427 2245.28,295.158 2238.55,298.62C2231.82,302.082 2228.45,311.891 2228.45,328.046Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M2798.52,472.293C2798.52,486.91 2797.56,495.853 2795.63,499.123C2793.71,502.392 2788.13,504.027 2778.9,504.027L2595.42,504.027C2590.42,504.027 2587.15,504.7 2585.61,506.047C2584.07,507.393 2583.3,509.605 2583.3,512.682C2583.3,541.531 2591.96,565.572 2609.27,584.805C2626.58,604.038 2648.12,613.654 2673.89,613.654C2690.81,613.654 2706.3,609.039 2720.34,599.807C2734.38,590.575 2743.51,578.843 2747.74,564.611L2752.93,547.878C2755.63,538.646 2761.97,534.03 2771.98,534.03C2786.21,534.03 2793.32,541.339 2793.32,555.956C2793.32,580.959 2780.63,603.172 2755.24,622.598C2729.86,642.023 2701.01,651.735 2668.7,651.735C2628.31,651.735 2596.19,638.176 2572.34,611.058C2548.49,583.94 2536.57,547.493 2536.57,501.719C2536.57,454.791 2549.26,416.71 2574.65,387.476C2600.03,358.242 2633.12,343.625 2673.89,343.625C2710.05,343.625 2739.86,355.742 2763.32,379.975C2786.78,404.209 2798.52,434.981 2798.52,472.293ZM2589.07,457.291C2589.07,462.676 2593.3,465.369 2601.76,465.369L2739.66,465.369C2747.74,465.369 2751.78,462.676 2751.78,457.291C2751.78,436.904 2744.09,419.21 2728.7,404.209C2713.32,389.207 2695.24,381.706 2674.47,381.706C2652.92,381.706 2633.31,389.495 2615.61,405.074C2597.92,420.653 2589.07,438.058 2589.07,457.291Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M2962.96,343.625C2988.73,343.625 3010.27,350.357 3027.58,363.82L3027.58,361.512C3027.58,347.279 3033.74,340.163 3046.04,340.163C3058.74,340.163 3065.09,346.318 3065.09,358.627C3065.09,360.935 3064.7,366.704 3063.93,375.936C3062.39,383.629 3061.62,391.323 3061.62,399.016C3061.62,403.632 3062.3,410.363 3063.64,419.21C3064.99,428.057 3065.66,434.789 3065.66,439.405C3065.66,454.022 3059.32,461.33 3046.62,461.33C3034.31,461.33 3027.97,455.176 3027.58,442.867L3027,423.826C3026.62,412.286 3019.98,402.381 3007.1,394.111C2994.21,385.841 2979.11,381.706 2961.8,381.706C2944.11,381.706 2929.3,386.226 2917.38,395.265C2905.45,404.305 2899.49,415.556 2899.49,429.019C2899.49,453.637 2916.41,468.254 2950.26,472.87L2983.73,477.486C3049.12,486.333 3081.82,513.451 3081.82,558.841C3081.82,586.536 3071.24,608.942 3050.08,626.06C3028.93,643.177 3001.23,651.735 2967,651.735C2935.07,651.735 2907.38,642.696 2883.91,624.617C2884.3,628.464 2884.49,632.118 2884.49,635.58C2884.49,649.428 2877.95,656.351 2864.87,656.351C2850.64,656.351 2843.52,648.466 2843.52,632.695C2843.52,635.388 2844.68,625.386 2846.98,602.692C2847.75,597.306 2848.14,591.921 2848.14,586.536C2848.14,577.304 2847.37,568.649 2845.83,560.572C2844.29,552.494 2843.52,546.147 2843.52,541.531C2843.52,528.068 2849.68,521.337 2861.99,521.337C2870.06,521.337 2875.16,523.26 2877.28,527.107C2879.39,530.953 2880.64,541.146 2881.03,557.687C2881.41,574.227 2890.07,587.69 2906.99,598.076C2923.91,608.462 2945.46,613.654 2971.61,613.654C2990.46,613.654 3006.04,608.846 3018.35,599.23C3030.66,589.613 3036.81,577.497 3036.81,562.88C3036.81,536.723 3016.04,521.529 2974.5,517.298C2934.88,513.067 2904.68,505.277 2883.91,493.93C2863.14,482.582 2852.75,462.676 2852.75,434.212C2852.75,407.286 2862.95,385.456 2883.33,368.724C2903.72,351.991 2930.26,343.625 2962.96,343.625Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M3218.56,474.601L3218.56,549.609C3218.56,568.842 3218.76,580.189 3219.14,583.651C3221.06,600.961 3226.26,609.615 3234.72,609.615C3236.64,609.615 3241.45,608.654 3249.14,606.731C3251.07,605.961 3253.95,605.577 3257.8,605.577C3272.41,605.577 3279.72,611.923 3279.72,624.617C3279.72,630.002 3277.32,634.618 3272.51,638.465C3267.7,642.311 3261.64,644.235 3254.34,644.235C3248.18,644.235 3238.85,643.369 3226.35,641.638C3213.85,639.907 3204.52,639.042 3198.37,639.042C3188.37,639.042 3177.21,639.811 3164.9,641.35C3149.9,643.273 3139.9,644.235 3134.9,644.235C3119.51,644.235 3111.82,637.695 3111.82,624.617C3111.82,611.923 3118.36,605.577 3131.44,605.577C3134.51,605.577 3139.03,606.154 3145,607.308C3150.96,608.462 3155.48,609.039 3158.56,609.039C3167.79,609.039 3173.37,596.729 3175.29,572.111L3175.29,424.403C3173.37,400.17 3167.6,388.053 3157.98,388.053C3154.9,388.053 3150.58,388.726 3145,390.072C3139.42,391.419 3135.28,392.092 3132.59,392.092C3118.74,392.092 3111.82,385.937 3111.82,373.628C3111.82,360.55 3120.28,354.011 3137.21,354.011C3144.52,354.011 3149.71,354.203 3152.79,354.588C3165.1,356.126 3172.98,356.896 3176.44,356.896C3179.52,356.896 3184.23,356.415 3190.58,355.453C3196.93,354.492 3201.64,354.011 3204.72,354.011C3215.87,354.011 3221.45,361.512 3221.45,376.513C3221.45,378.052 3221.26,380.36 3220.87,383.437C3220.49,386.514 3220.29,388.822 3220.29,390.361C3219.91,393.438 3219.53,405.362 3219.14,426.134C3218.76,441.905 3218.56,458.061 3218.56,474.601ZM3188.56,323.43C3179.71,323.43 3172.12,320.257 3165.77,313.91C3159.42,307.563 3156.25,299.966 3156.25,291.119C3156.25,282.272 3159.42,274.771 3165.77,268.617C3172.12,262.462 3179.71,259.385 3188.56,259.385C3197.41,259.385 3205,262.462 3211.35,268.617C3217.7,274.771 3220.87,282.272 3220.87,291.119C3220.87,299.966 3217.7,307.563 3211.35,313.91C3205,320.257 3197.41,323.43 3188.56,323.43Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M3440.7,343.625C3450.7,343.625 3462.05,345.164 3474.74,348.241C3476.67,310.544 3498.59,291.696 3540.52,291.696C3558.22,291.696 3573.03,296.312 3584.95,305.544C3596.87,314.776 3602.84,326.508 3602.84,340.74C3602.84,349.972 3599.85,357.857 3593.89,364.396C3587.93,370.936 3580.91,374.205 3572.83,374.205C3566.68,374.205 3561.29,372.09 3556.68,367.858C3552.06,363.627 3549.75,358.627 3549.75,352.857C3549.75,346.702 3553.98,340.355 3562.45,333.816C3556.29,326.123 3548.41,322.277 3538.79,322.277C3518.4,322.277 3508.02,334.97 3507.63,360.358C3536.87,379.975 3551.48,406.324 3551.48,439.405C3551.48,465.946 3541.48,488.064 3521.48,505.758C3501.48,523.452 3476.48,532.299 3446.47,532.299C3425.32,532.299 3403.39,527.299 3380.7,517.298C3374.54,514.605 3369.35,513.259 3365.12,513.259C3359.73,513.259 3354.92,515.663 3350.69,520.471C3346.46,525.279 3344.35,530.953 3344.35,537.492C3344.35,557.494 3364.54,567.496 3404.93,567.496L3408.39,567.496C3411.47,567.496 3414.93,567.303 3418.78,566.919L3425.7,566.919C3462.24,566.919 3491.86,570.38 3514.56,577.304C3535.71,583.843 3552.45,594.037 3564.75,607.885C3577.06,621.732 3583.22,637.311 3583.22,654.62C3583.22,682.7 3570.24,704.914 3544.27,721.262C3518.31,737.61 3483.21,745.784 3438.97,745.784C3394.74,745.784 3360.02,738.091 3334.83,722.705C3309.63,707.318 3297.03,686.162 3297.03,659.236C3297.03,628.079 3314.53,605.961 3349.54,592.883C3318.38,580.574 3302.8,562.11 3302.8,537.492C3302.8,510.566 3318.38,492.103 3349.54,482.102C3339.54,468.639 3334.54,452.868 3334.54,434.789C3334.54,408.632 3344.63,386.899 3364.83,369.589C3385.02,352.28 3410.32,343.625 3440.7,343.625ZM3442.43,381.706C3425.51,381.706 3411.08,386.707 3399.16,396.708C3387.24,406.709 3380.7,419.21 3379.54,434.212L3379.54,437.674C3379.54,454.599 3385.31,468.254 3396.85,478.64C3408.39,489.025 3423.39,494.218 3441.86,494.218C3461.09,494.218 3476.76,489.025 3488.88,478.64C3501,468.254 3507.06,454.983 3507.06,438.828C3507.06,422.287 3500.9,408.632 3488.59,397.862C3476.28,387.091 3460.9,381.706 3442.43,381.706ZM3443.01,605.577C3412.24,605.577 3388,610.192 3370.31,619.424C3352.62,628.656 3343.77,641.157 3343.77,656.928C3343.77,672.699 3352.42,685.104 3369.73,694.144C3387.04,703.183 3410.32,707.703 3439.55,707.703C3470.32,707.703 3494.65,703.087 3512.54,693.855C3530.42,684.624 3539.37,672.315 3539.37,656.928C3539.37,640.773 3530.91,628.175 3513.98,619.136C3497.06,610.096 3473.4,605.577 3443.01,605.577Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
    <path d="M3707.27,371.32L3707.27,387.476C3730.35,358.242 3761.12,343.625 3799.59,343.625C3820.36,343.625 3839.98,348.914 3858.44,359.492C3876.9,370.07 3889.41,383.245 3895.94,399.016C3901.33,412.094 3904.02,429.211 3904.02,450.367L3904.02,559.995C3904.02,576.535 3904.21,586.344 3904.6,589.421C3906.52,602.499 3911.72,609.039 3920.18,609.039C3923.64,609.039 3928.16,608.558 3933.74,607.596C3939.31,606.634 3943.26,606.154 3945.57,606.154C3950.57,606.154 3954.89,607.885 3958.55,611.346C3962.2,614.808 3964.03,619.04 3964.03,624.04C3964.03,629.81 3961.72,634.618 3957.11,638.465C3952.49,642.311 3946.91,644.235 3940.37,644.235C3934.99,644.235 3926.14,643.465 3913.83,641.927C3901.52,640.388 3889.98,639.619 3879.21,639.619C3869.21,639.619 3860.94,640.003 3854.4,640.773C3835.17,643.081 3824.97,644.235 3823.82,644.235C3808.43,644.235 3800.74,637.503 3800.74,624.04C3800.74,612.116 3807.28,606.154 3820.36,606.154C3823.44,606.154 3826.9,606.538 3830.74,607.308C3838.05,608.846 3842.67,609.615 3844.59,609.615C3853.82,609.615 3858.83,599.037 3859.59,577.881L3860.75,548.455L3861.33,513.259L3861.33,469.408C3861.33,449.021 3860.36,434.981 3858.44,427.288C3854.98,412.671 3847.48,401.324 3835.94,393.246C3823.24,384.399 3808.82,379.975 3792.66,379.975C3761.89,379.975 3739.77,390.938 3726.31,412.863C3717.08,427.865 3712.46,453.445 3712.46,489.602L3712.46,566.342C3712.46,583.266 3713.62,594.806 3715.93,600.961C3718.23,607.115 3722.46,610.192 3728.62,610.192C3731.7,610.192 3735.93,609.423 3741.31,607.885C3746.7,606.346 3751.12,605.577 3754.58,605.577C3766.51,605.577 3772.47,612.116 3772.47,625.194C3772.47,637.888 3764.78,644.235 3749.39,644.235C3746.31,644.235 3736.31,643.081 3719.39,640.773C3710.92,639.619 3701.5,639.042 3691.11,639.042C3683.04,639.042 3672.27,639.811 3658.8,641.35C3641.88,643.273 3632.26,644.235 3629.95,644.235C3613.8,644.235 3605.72,637.695 3605.72,624.617C3605.72,612.308 3611.88,606.154 3624.18,606.154C3626.11,606.154 3629.66,606.731 3634.86,607.885C3640.05,609.039 3645.15,609.615 3650.15,609.615C3661.69,609.615 3667.65,598.46 3668.03,576.15L3669.19,512.105L3669.19,442.29L3668.03,422.095C3667.27,409.017 3665.63,400.073 3663.13,395.265C3660.63,390.457 3656.3,388.053 3650.15,388.053C3647.46,388.053 3643.51,388.534 3638.32,389.495C3633.13,390.457 3629.18,390.938 3626.49,390.938C3612.64,390.938 3605.72,384.783 3605.72,372.474C3605.72,359.781 3614.38,353.434 3631.68,353.434C3633.99,353.434 3635.92,353.626 3637.45,354.011L3658.8,356.319C3664.96,356.319 3670.34,355.934 3674.96,355.165C3684.96,354.395 3690.15,354.011 3690.54,354.011C3701.69,354.011 3707.27,359.781 3707.27,371.32Z" style="fill:white;fill-rule:nonzero;stroke:rgb(255,0,0);stroke-width:10.44px;"/>
</g>
</svg>`

// PAGE STATE
const worldState = {
  statsOn: false,
  starsState: {
    active: false,
    distance: 100
  },
  bassState: {
    active: false
  },
  scrolledFromTop: 0,
}


// CAMERA, SCENE SETUP
// ( field of view, aspect ratio, near , and far camera frustrum )
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);
const container = document.getElementById('container')
const stats = new Stats();


// RENDERER, WINDOW SIZE, SCROLLING
const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector('#bg') });
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(window.innerWidth, window.innerHeight);
window.onresize = function () {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
  ////
  trackScrolling();
};

function trackScrolling() {
  // the value of getBoundingClientRect().top will always be negative
  // the division factor is arbitrary for now
  worldState.scrolledFromTop = -1 * document.body.getBoundingClientRect().top;
  camera.position.y = 0 - worldState.scrolledFromTop / 230
}

document.body.onscroll = trackScrolling


// ANIMATION SETUP
let mixer;
let clock = new THREE.Clock();


// BUTTONS
document.getElementById("statsButton").onclick = function () {
  worldState.statsOn ? container.removeChild(stats.dom) : container.appendChild(stats.dom);
  worldState.statsOn = !worldState.statsOn;
};
document.getElementById("starsButton").onclick = function () {
  worldState.starsState.active = !worldState.starsState.active
};
document.getElementById("bassButton").onclick = function () {
  worldState.bassState.active = !worldState.bassState.active
};


// LIGHTING AND POINTERS
const pointLight = new THREE.PointLight(0xffffff)
const ambientLight = new THREE.AmbientLight(0xffffff)
const lightHelper = new THREE.PointLightHelper(pointLight)
const gridHelper = new THREE.GridHelper();
scene.add(pointLight, ambientLight);
scene.add(lightHelper, gridHelper)
pointLight.position.set(0, 4, 0)


// CAMERA INITIAL POSITIONING
camera.position.set(0, 0, 10);
camera.rotation.x = 0;


  const bgLoader = new THREE.CubeTextureLoader();
  const bgTexture = bgLoader.load([
    '/pictures/sides.jpg',
    '/pictures/sides.jpg',
    '/pictures/top.jpg',
    '/pictures/bottom.jpg',
    '/pictures/sides.jpg',
    '/pictures/sides.jpg',

  ]);
  scene.background = bgTexture;


// // GEOMETRIES
// const geometry = new THREE.IcosahedronGeometry(0.5)
// const material = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });
// const icosahedron = new THREE.Mesh(geometry, material);
// scene.add(icosahedron)


// let stars = [];
// const starsGroup = new THREE.Group();
// const starGeometry = new THREE.OctahedronGeometry(0.25);
// const starMaterial = new THREE.MeshStandardMaterial({ color: 0x000000, wireframe: true })
// function addStar() {
//   const star = new THREE.Mesh(starGeometry, starMaterial);
//   const x = THREE.MathUtils.randFloatSpread(100)
//   const y = Math.abs(THREE.MathUtils.randFloatSpread(100))
//   const z = THREE.MathUtils.randFloatSpread(100) ;
//   // y = Math.abs(y);
//   star.name = `star`;
//   star.position.set(x, y, z);
//   star.rotation.x = [y]
//   star.rotation.y = [x]
//   star.originalPosition = { x, y, z }
//   stars.push(star)
//   starsGroup.add(star)
// }

// Array(200).fill().forEach(addStar)
// scene.add(starsGroup)


// let cubes = [];
// let cubeZPosition = -30;
// const cubesGroup = new THREE.Group();

// const cubeGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);
// const redMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: false })
// const whiteMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff, wireframe: false })

// function addCube() {
//   const cube = new THREE.Mesh((cubeGeometry),
//     (cubeZPosition % 5 === 0 ? redMaterial : whiteMaterial));
//   cube.name = `cube`;
//   cube.position.set(2, cubeZPosition, 2);
//   cubeZPosition++
//   cubes.push(cube)
//   cubesGroup.add(cube)
// }

// Array(40).fill().forEach(addCube)
// scene.add(cubesGroup)


// // OBJECT LOADERS
// const loader = new GLTFLoader();

// // let chair;
// // loader.load('./3d_models/messed_up_chair.glb', function (gltf) {
// //   chair = gltf.scene;
// //   scene.add(chair);
// //   // const chairControls = new OrbitControls(chair, renderer.domElement);
// //   chair.position.set(-2, 0, 0);
// //   console.log('chair loaded')
// // }, function (xhr) {
// //   // console.log((xhr.loaded / xhr.total * 100), "%  chair loaded")
// // }, function (error) {
// //   console.error(error);
// // });

// let bass;
// loader.load('./3d_models/anibass.glb', function (gltf) {
//   bass = gltf.scene;
//   scene.add(bass);

//   // necessary for the imported animations
//   mixer = new THREE.AnimationMixer(gltf.scene);
//   gltf.animations.forEach((clip) => {
//     mixer.clipAction(clip).play();
//   });

//   bass.position.set(2, 0, 0);
//   console.log('bass loaded')
// }, function (xhr) {
//   // console.log((xhr.loaded / xhr.total * 100), "% bass loaded")
// }, function (error) {
//   console.error(error);
// });


// // instantiate a loader
// const svgLoader = new SVGLoader();

// // load a SVG resource
// const svgGroup = new THREE.Group();
// svgLoader.load('/pictures/sd.svg',	function ( data ) {
// 		const paths = data.paths;

// 		for ( let i = 0; i < paths.length; i ++ ) {
// 			const path = paths[ i ];
// 			const svgMaterial = new THREE.MeshBasicMaterial( {
// 				color: path.color,
// 				side: THREE.DoubleSide,
// 				depthWrite: false
// 			} );

// 			const shapes = SVGLoader.createShapes( path );

// 			for ( let j = 0; j < shapes.length; j ++ ) {
// 				const shape = shapes[ j ];
// 				const svgGeometry = new THREE.ShapeGeometry( shape );
// 				const svgMesh = new THREE.Mesh( svgGeometry, svgMaterial );
// 				svgGroup.add( svgMesh );
// 			}
// 		}
// 		scene.add( svgGroup );
// 	},
// 	// called when loading is in progresses
// 	function ( xhr ) {
// 		console.log( ( xhr.loaded / xhr.total * 100 ) + '% sound_design loaded' );
// 	},
// 	function ( error ) {
// 		console.log( error );
// 	}
// );


// svg.js
const fillMaterial = new THREE.MeshBasicMaterial({ color: "#F3FBFB" });
const stokeMaterial = new THREE.LineBasicMaterial({
  color: "#00A5E6",
});
const renderSVG = (extrusion, svg) => {
  const loader = new SVGLoader();
  const svgData = loader.parse(svg);
  const svgGroup = new THREE.Group();
  const updateMap = [];

  svgGroup.scale.y *= -1;
  svgData.paths.forEach((path) => {
    const shapes = SVGLoader.createShapes(path);

    shapes.forEach((shape) => {
      const meshGeometry = new THREE.ExtrudeBufferGeometry(shape, {
        depth: extrusion,
        bevelEnabled: false,
      });
      const linesGeometry = new THREE.EdgesGeometry(meshGeometry);
      const mesh = new THREE.Mesh(meshGeometry, fillMaterial);
      const lines = new THREE.LineSegments(linesGeometry, stokeMaterial);

      updateMap.push({ shape, mesh, lines });
      svgGroup.add(mesh, lines);
    });
  });

  const box = new THREE.Box3().setFromObject(svgGroup);
  const size = box.getSize(new THREE.Vector3());
  const yOffset = size.y / -2;
  const xOffset = size.x / -2;

  // Offset all of group's elements, to center them
  svgGroup.children.forEach((item) => {
    item.position.x = xOffset;
    item.position.y = yOffset;
    item.position.z = 0;
  });
  svgGroup.rotateX(-Math.PI / 2);

  return {
    object: svgGroup,
    update(extrusion) {
      updateMap.forEach((updateDetails) => {
        const meshGeometry = new THREE.ExtrudeBufferGeometry(
          updateDetails.shape,
          {
            depth: extrusion,
            bevelEnabled: false,
          }
        );
        const linesGeometry = new THREE.EdgesGeometry(meshGeometry);

        updateDetails.mesh.geometry.dispose();
        updateDetails.lines.geometry.dispose();
        updateDetails.mesh.geometry = meshGeometry;
        updateDetails.lines.geometry = linesGeometry;
      });
    },
  };
};

const defaultExtrusion = 1;
const { object, update } = renderSVG(defaultExtrusion, svg);

scene.add(object);

// CONTROLS
const controls = new OrbitControls(camera, renderer.domElement);


// ANIMATION
let delta;
function animate() {
  requestAnimationFrame(animate);
  renderer.render(scene, camera);

  // run the imported animation (bass)
  // delta = clock.getDelta();
  // (mixer && worldState.bassState.active) && mixer.update(delta);

  // // run the "built in" animations
  // icosahedronAnimation()
  // // chairAnimation();
  // worldState.starsState.active && starsAnimation();
 

  stats && stats.update();
}

// f is the factor of displacement of the stars
// d changes the direction of the stars
let f;
let d = true;

// function starsAnimation() {
//   f = worldState.starsState.distance * 0.01;
//   stars.forEach(function (s) {
//     // s.rotation.x += 0.1;
//     s.rotation.z += 0.07;
//     s.position.x = s.originalPosition.x * f;
//     s.position.y = Math.abs(s.originalPosition.y * f);
//     s.position.z = s.originalPosition.z * f;
//   })
//   // depending on d, invert the direction
//   d ? worldState.starsState.distance += 0.07 : worldState.starsState.distance -= 0.07
//   // if you reach the limit (f = 1/100 distance), put distance back at the limit and change direction
//   f < -1 && (d = !d, worldState.starsState.distance = -100);
//   f > 1 && (d = !d, worldState.starsState.distance = 100);
//   // starsGroup.rotation.x += 0.0002;
//   starsGroup.rotation.y -= 0.001;
//   // starsGroup.rotation.z += 0.00027;
// }

// function icosahedronAnimation() {
//   icosahedron && (icosahedron.rotation.y += 0.01);
//   icosahedron && (icosahedron.rotation.z += 0.007);
// }

// function chairAnimation() {
//   chair && (
//     chair.rotation.x += 0.01
//     // chair.position.x > boxBounds.x && (chairSwitch.x = !chairSwitch.x, chair.position.x = boxBounds.x),
//     // chair.position.y > boxBounds.y && (chairSwitch.y = !chairSwitch.y, chair.position.y = boxBounds.y),
//     // chair.position.z > boxBounds.z && (chairSwitch.z = !chairSwitch.z, chair.position.z = boxBounds.z),
//     // chairSwitch = true ? (chair.position.x += 0.1) : (chair.position.x -= 0.1),
//     // chairSwitch = true ? (chair.position.y += 0.1) : (chair.position.y -= 0.1),
//     // chairSwitch = true ? (chair.position.z += 0.1) : (chair.position.z -= 0.1)
//   );
// }

animate()